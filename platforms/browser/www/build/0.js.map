{"version":3,"sources":["../../src/pages/car/car.module.ts","../../src/pages/car/car.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AAChB;AAUhC;IAAA;IAA4B,CAAC;IAAhB,aAAa;QARzB,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,qDAAO;aACR;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,qDAAO,CAAC;aAClC;SACF,CAAC;OACW,aAAa,CAAG;IAAD,oBAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;ACZgB;AACe;AAEF;AAEvD;;;;;GAKG;AAOH;IAEI,iBAAmB,OAAsB,EAAS,SAAoB,EAAU,UAAsB;QAAnF,YAAO,GAAP,OAAO,CAAe;QAAS,cAAS,GAAT,SAAS,CAAW;QAAU,eAAU,GAAV,UAAU,CAAY;IACxG,CAAC;IAED,gCAAc,GAAd;QACE,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;IACxC,CAAC;IAPU,OAAO;QAJnB,wEAAS,CAAC;YACT,QAAQ,EAAE,UAAU;WACG;SACxB,CAAC;gBAGwG;OAF7F,OAAO,CAwWnB;IAAD,CAAC;AAAA;SAxWY,OAAO,e","file":"0.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { CarPage } from './car';\n\n@NgModule({\n  declarations: [\n    CarPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(CarPage),\n  ],\n})\nexport class CarPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/car/car.module.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\n\nimport { DatePicker } from '@ionic-native/date-picker';\n\n/**\n * Generated class for the CarPage page.\n *\n * See https://ionicframework.com/docs/components/#navigation for more info on\n * Ionic pages and navigation.\n */\n\n@IonicPage()\n@Component({\n  selector: 'page-car',\n  templateUrl: 'car.html',\n})\nexport class CarPage {\n\n    constructor(public navCtrl: NavController, public navParams: NavParams, private datePicker: DatePicker) {\n  }\n\n  ionViewDidLoad() {\n    console.log('ionViewDidLoad CarPage');\n  }\n/*\n    MaxSeatAmount = 0;\n    ReserveCarInfo = {};\n    SeatAmountList = [];\n    ProvinceList = [];\n    RequestUser = {};\n    CarTimeList = ['00:00:00','01:00:00','02:00:00','03:00:00','04:00:00','05:00:00'\n                        ,'06:00:00','07:00:00','08:00:00','09:00:00','10:00:00','11:00:00','12:00:00'\n                        ,'13:00:00','14:00:00','15:00:00','16:00:00','17:00:00','18:00:00'\n                        ,'19:00:00','20:00:00','21:00:00','22:00:00','23:00:00']; \n    \n\n  \n\n  getMaxSeatAmount = function (){\n        \n        this.http.get( this.webServerHost + '/dpo/public/getMaxSeatAmount/', {}, {\"Content-Type\": \"application/json\"})\n        .then(data => {\n          var res = JSON.parse(data.data);\n          this.MaxSeatAmount = res.DATA.SeatAmount;\n        });\n       \n    }\n\n    setSeatAmount = function(hasDriver){\n        var seatAmount = this.MaxSeatAmount;\n        // if(hasDriver == 'Y'){\n        //     seatAmount = seatAmount - 1;   \n        // }\n        this.SeatAmountList = [];\n\n        for(var i = 0; i < seatAmount; i++){\n            this.SeatAmountList.push({'SeatAmount':(i+1)});\n        }\n\n        if(this.ReserveCarInfo.TravelerAmount > this.SeatAmountList.length){\n            this.ReserveCarInfo.TravelerAmount = 0;\n        }\n    }\n\n    setDriver = function(DriverType){\n        this.setSeatAmount(DriverType);\n    }\n\n    getProvinceList = function (){\n        \n        this.http.get( this.webServerHost + '/dpo/public/getProvinceList/', {}, {\"Content-Type\": \"application/json\"})\n        .then(data => {\n          var res = JSON.parse(data.data);\n          this.ProvinceList = res.DATA;\n        });\n    }\n\n    getReserveCarInfo = function(){\n      \n        this.http.post( this.webServerHost + '/dpo/public/getCarReserveDetail/', {}, {\"Content-Type\": \"application/json\"})\n        .then(data => {\n          var res = JSON.parse(data.data);\n          if(res.STATUS=='OK'){\n                //alert(res.DATA.ReserveCarInfo.TravelerAmount);\n                this.CarDetail = res.DATA.CarInfo;\n                this.ReserveCarInfo = {\n                    ReserveCarID : res.DATA.ReserveCarInfo.ReserveCarID\n                    ,RegionID : parseInt(res.DATA.ReserveCarInfo.RegionID)\n                    ,ProvinceID : parseInt(res.DATA.ReserveCarInfo.ProvinceID)\n                    ,CarID : res.DATA.ReserveCarInfo.CarID\n                    ,StartDateTime : res.DATA.ReserveCarInfo.StartDateTime\n                    ,EndDateTime : res.DATA.ReserveCarInfo.EndDateTime\n                    ,Destination : res.DATA.ReserveCarInfo.Destination\n                    ,Mission : res.DATA.ReserveCarInfo.Mission\n                    ,TravelerAmount : parseInt(res.DATA.ReserveCarInfo.TravelerAmount)//(res.DATA.ReserveCarInfo.TravelerAmount==0?this.SeatAmountList[0].SeatAmount:res.DATA.ReserveCarInfo.TravelerAmount)\n                    ,DriverType : res.DATA.ReserveCarInfo.DriverType\n                    ,Remark : res.DATA.ReserveCarInfo.Remark\n                    ,ReserveStatus : res.DATA.ReserveCarInfo.ReserveStatus\n                    ,AdminComment : res.DATA.ReserveCarInfo.AdminComment\n                    ,AdminID : res.DATA.ReserveCarInfo.AdminID\n                    ,CreateBy : res.DATA.ReserveCarInfo.CreateBy\n                    ,CreateDateTime : res.DATA.ReserveCarInfo.CreateDateTime\n                    ,UpdateBy : res.DATA.ReserveCarInfo.UpdateBy\n                    ,UpdateDateTime : res.DATA.ReserveCarInfo.UpdateDateTime\n                    ,RegionName : this.$parent.currentUser.RegionName\n                    ,ProvinceName : res.DATA.ReserveCarInfo.ProvinceName\n                };\n\n                this.DriverType = this.ReserveCarInfo.DriverType;\n                this.ReserveCarInfo.StartDate = this.convertDateToSQLString(res.DATA.ReserveCarInfo.StartDateTime);\n                this.ReserveCarInfo.StartTime = this.convertTimeToSQLString(res.DATA.ReserveCarInfo.StartDateTime);\n                this.ReserveCarInfo.EndDate = this.convertDateToSQLString(res.DATA.ReserveCarInfo.EndDateTime);\n                this.ReserveCarInfo.EndTime = this.convertTimeToSQLString(res.DATA.ReserveCarInfo.EndDateTime);\n                if(res.DATA.TravellerList != null){\n                    this.TravellerList = res.DATA.TravellerList;\n                }\n\n                if(res.DATA.InternalDriver != null){\n                    this.InternalDriver = res.DATA.InternalDriver;\n                    this.InternalDriver.Name =  this.InternalDriver.FirstName + ' ' +  this.InternalDriver.LastName;\n                }\n                if(res.DATA.ExternalDriver != null){\n                    this.ExternalDriver = res.DATA.ExternalDriver;\n                }      \n                this.RequestUser = res.DATA.RequestUser;\n                this.VerifyUser = res.DATA.VerifyUser;\n\n                this.oldValueTravelerAmount = this.ReserveCarInfo.TravelerAmount;\n\n                // Admin setting zone\n                if(this.ReserveCarInfo.AdminID == this.currentUser.UserID){\n                    if(this.ReserveCarInfo.ReserveStatus == 'Request'){\n                        if(this.ReserveCarInfo.DriverType == 'Y'){\n                            this.ReserveCarInfo.DriverType = 'Internal';\n                        }\n                    }\n                    \n                }\n\n            }\n        \n        });\n    }\n\n    saveDraft = function (){\n        \n        this.ReserveCarInfo.StartDateTime = this.concatDateTimeSQL(this.ReserveCarInfo.StartDate, this.ReserveCarInfo.StartTime);\n        this.ReserveCarInfo.EndDateTime = this.concatDateTimeSQL(this.ReserveCarInfo.EndDate, this.ReserveCarInfo.EndTime);\n        \n        this.http.post( this.webServerHost + '/dpo/public/updateReserveCarInfo/', {\n                            'ReserveCarInfo' : this.ReserveCarInfo\n                            ,'TravellerList' : this.TravellerList\n                            ,'reserveCarID':this.reserveCarID\n                        }, {\"Content-Type\": \"application/json\"})\n        .then(data => {\n          var res = JSON.parse(data.data);\n           if(res.STATUS=='OK'){\n             alert('บันทึกสำเร็จ');\n           }else{\n             alert(res.DATA.MSG);\n           }\n        });        \n    }\n\n    deleteTraveller = function (index, travellerID){\n        \n        this.TravellerList.splice(index, 1);\n        \n    }\n\n    cancelReserveCar = function (reserveCarID){\n        this.alertMessage = 'ต้องการยกเลิกการจองพาหนะ ใช่หรือไม่ ?';\n        // var modalInstance = $uibModal.open({\n        //     animation : true,\n        //     templateUrl : 'html/dialog_confirm.html',\n        //     size : 'sm',\n        //     scope : this,\n        //     backdrop : 'static',\n        //     controller : 'ModalDialogCtrl',\n        //     resolve : {\n        //         params : function() {\n        //             return {};\n        //         } \n        //     },\n        // });\n        // modalInstance.result.then(function (valResult) {\n            \n        this.http.post( this.webServerHost + '/dpo/public/getCarReserveDetail/', {'reserveCarID':reserveCarID}, {\"Content-Type\": \"application/json\"})\n        .then(data => {\n          var res = JSON.parse(data.data);\n          if(res.STATUS == 'OK'){\n            alert('ยกเลิกการจองเรียบร้อยแล้ว');\n          }\n        });\n        // }, function () {});\n            \n    }\n\n    requestReserveCar = function (){\n\n        if(parseInt(this.ReserveCarInfo.TravelerAmount) > this.TravellerList.length){\n            alert('จำนวนผู้เดินทางมากกว่ารายชื่อที่ถูกเพิ่มไว้');\n            return false;\n        }\n\n        // this.alertMessage = 'ต้องการส่งคำขอการจองพาหนะ ใช่หรือไม่ ?';\n        // var modalInstance = $uibModal.open({\n        //     animation : true,\n        //     templateUrl : 'html/dialog_confirm.html',\n        //     size : 'sm',\n        //     scope : this,\n        //     backdrop : 'static',\n        //     controller : 'ModalDialogCtrl',\n        //     resolve : {\n        //         params : function() {\n        //             return {};\n        //         } \n        //     },\n        // });\n        // modalInstance.result.then(function (valResult) {\n            \n            \n        this.ReserveCarInfo.StartDateTime = this.concatDateTimeSQL(this.ReserveCarInfo.StartDate, this.ReserveCarInfo.StartTime);\n        this.ReserveCarInfo.EndDateTime = this.concatDateTimeSQL(this.ReserveCarInfo.EndDate, this.ReserveCarInfo.EndTime);\n        \n        this.http.post( this.webServerHost + '/dpo/public/requestReserveCar/', {'ReserveCarInfo':this.ReserveCarInfo\n                    ,'TravellerList':this.TravellerList\n                    ,'RequestUser':this.RequestUser}, {\"Content-Type\": \"application/json\"})\n        .then(data => {\n          var res = JSON.parse(data.data);\n          if(res.STATUS == 'OK'){\n            alert('ส่งคำขอเรียบร้อยแล้ว');\n          }\n        });\n         \n    }\n\n    adminUpdateCarStatus = function (){\n        // this.alertMessage = 'ต้องการ '+(this.ReserveCarInfo.ReserveStatus=='Approve'?'อนุมัติ':'ไม่อนุมัติ')+' การจองพาหนะนี้ ใช่หรือไม่ ?';\n        // var modalInstance = $uibModal.open({\n        //     animation : true,\n        //     templateUrl : 'html/dialog_confirm.html',\n        //     size : 'sm',\n        //     scope : this,\n        //     backdrop : 'static',\n        //     controller : 'ModalDialogCtrl',\n        //     resolve : {\n        //         params : function() {\n        //             return {};\n        //         } \n        //     },\n        // });\n        // modalInstance.result.then(function (valResult) {\n        this.http.post( this.webServerHost + '/dpo/public/adminUpdateCarStatus/', {'ReserveCarInfo':this.ReserveCarInfo\n                    ,'TravellerList':this.TravellerList\n                    ,'InternalDriver':this.InternalDriver\n                    ,'ExternalDriver':this.ExternalDriver}, {\"Content-Type\": \"application/json\"})\n        .then(data => {\n          var res = JSON.parse(data.data);\n          if(res.STATUS == 'OK'){\n            alert((this.ReserveCarInfo.ReserveStatus=='Approve'?'อนุมัติ':'ไม่อนุมัติ')+'คำขอเรียบร้อยแล้ว');\n          }\n        }); \n    }\n\n\n\n    checkSelectDateTime = function (startDate, startTime, endDate, endTime){\n        //console.log(startDate, startTime, endDate, endTime);\n        if(startDate != null \n                && endDate != null \n                && (startTime != undefined && startTime != '') \n                && (endTime != undefined && endTime != '')){\n            var timeArr = startTime.split(':');\n            startDate.setHours(timeArr[0]);\n            startDate.setMinutes(timeArr[1]);\n            startDate.setSeconds(0);\n\n            timeArr = endTime.split(':');\n            endDate.setHours(timeArr[0]);\n            endDate.setMinutes(timeArr[1]);\n            endDate.setSeconds(0);\n\n            //console.log(startDate > endDate);\n            if(startDate > endDate){\n                alert('วันที่เดินทางไปน้อยกว่าวันที่เดินทางกลับ');\n                \n                this.ReserveCarInfo.EndDate = null;\n                this.ReserveCarInfo.EndTime = '';\n                \n            }\n        }\n    }\n\n    checkReserveStatus = function (type){\n        if(type == 'Reject'){\n            this.ExternalDriver.DriverName = '';\n            this.ExternalDriver.Mobile = '';\n            this.InternalDriver.Name = '';\n        }else{\n            this.ReserveCarInfo.AdminComment = '';\n        }\n    }\n\n    checkDriverType = function (type){\n        if(type == 'Internal'){\n            this.ExternalDriver.DriverName = '';\n            this.ExternalDriver.Mobile = '';\n        }else{\n            this.InternalDriver.Name = '';\n        }\n    }\n\n    checkTraveller = function (){\n        var totalTraveller = this.TravellerList.length;\n        if(this.ReserveCarInfo.TravelerAmount < totalTraveller){\n            alert('จำนวนผู้เดินทางที่เลือกน้อยกว่าจำนวนผู้เดินทางที่เพิ่มไว้');\n            this.ReserveCarInfo.TravelerAmount = this.oldValueTravelerAmount;   \n            \n        }else{\n            this.oldValueTravelerAmount = this.ReserveCarInfo.TravelerAmount;\n        }\n    }\n\n    checkInternalDriverCondition = function (){\n        return (this.ReserveCarInfo.DriverType == 'Internal' && (this.InternalDriver.Name == '' || this.InternalDriver.Name == null));\n    }\n\n    convertDateToSQLString = function(dateInput){\n        // console.log(dateInput);\n        // dateInput = dateInput.replace('.000','');\n        var d1 = dateInput.split(' ');\n        // d1[0] = date , d1[1] = time\n        var d2 = d1[0].split('-');\n        var d3 = d1[1].split(':');\n        var d = new Date(d2[0], parseInt(d2[1]) - 1, d2[2]);\n        // d.setDate(31);\n        // d.setMonth(parseInt(d2[1]) - 1);\n        // d.setYear(d2[0]);\n        d.setSeconds(d3[2]);\n        d.setMinutes(d3[1]);\n        d.setHours(d3[0]);\n        // console.log(d);\n        return d;\n    }\n\n    concatDateTimeSQL(d , t){\n        return d.getFullYear() + '-' + this.padLeft(\"\"+(d.getMonth() + 1), '00') + '-' + this.padLeft(\"\"+(d.getDate()), '00') + ' ' + t + ':00';\n    }\n\n    padLeft(str, pad){\n        return pad.substring(0, pad.length - str.length) + str;\n    }\n\n    showStartDateTime(){\n        this.datePicker.show({\n          date: new Date(),\n          mode: 'date',\n          androidTheme: this.datePicker.ANDROID_THEMES.THEME_HOLO_DARK\n        }).then(\n          date => console.log('Got date: ', date),\n          err => console.log('Error occurred while getting date: ', err)\n        );\n    }\n\n    showEndDateTime(){\n        this.datePicker.show({\n          date: new Date(),\n          mode: 'date',\n          androidTheme: this.datePicker.ANDROID_THEMES.THEME_HOLO_DARK\n        }).then(\n          date => console.log('Got date: ', date),\n          err => console.log('Error occurred while getting date: ', err)\n        );\n    }\n*/\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/car/car.ts"],"sourceRoot":""}